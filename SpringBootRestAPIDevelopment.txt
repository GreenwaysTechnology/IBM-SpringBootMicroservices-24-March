  		   Spring Boot REST API Development
.....................................................................................

In General , we can build many types of apps in Spring boot

Common types of apps

1.CommandLine application.
2.Web Applications

Web Applications:

1.Dynamic Web Application:
   Type of web application which talks to datasources, read data , build html pages.
 Users finally access html pages...
 Building web sites.

How to build Dynamic web application in Spring /Spring Boot?

 Spring provides a module/project called "Spring-MVC"


What is Spring?

 Spring java and JEE framework
 Framework is collections of many things called projects and modules.

 Spring Provides many modules, each module offers features for different type of application.

Spring Projects:
................

1.Spring core - Spring Framework
   At core, this project is very core, all projects which was built on the top of Spring core..

2.Spring Boot  - Advanced Spring configuration System

3.Spring Web Frameworks
   ->Spring MVC 
       Spring WebFlux

 Spring MVC | Spring Web Flux
   => Dynamic web apps - Web application with User interface
   => Web services


Web Service:

1.SOAP Web Service -Spring Web Services-4.0.10
2.RestFull Web Services  - Spring MVC
3.GraphQL -  Alternate to REST
....................................................................................
		Spring boot and REST full web service Development
....................................................................................

What is REST?

RE-Reprentational
S-State 
T-Transfer

RE-Reprentational
  Data format - JSON,XML,AVRO,PROTOBuf,pdf,media
S - State 
   Data - Objects and Collections

T- Transfer
  Data is converted into any format which is user interested and transfer over http protocal.

REST is  just specification which was released as part of http specification by co author of http protocal , Roy Fielding.

https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm.
....................................................................................
			   REST Working Principles
....................................................................................

REST Works based on HTTP protocal and its semantic verbs

POST -----> CREATE
GET ------ >READ
PUT | PATCH--------->UPDATE
DELETE-------DELETE

CURD Operations
.....................................................................................

Steps to build REST API

1.Resource
  Domain model, eg Order,Customer,Student,Trainer,Subject

2.Expose api
   Every resource has api , which helps to transfer and get data from and to...

3.Connect to DataSource
   Every api connects to data source in order to get data/read data..

.....................................................................................
			 Spring boot Rest api development

1.create project with following dependency(core)

2.Every spring boot web app runs on Tomcat Container..

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.ibm</groupId>
	<artifactId>restapp</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>restapp</name>
	<description>Building RestFull api</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>

package com.ibm.web;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RestApplication {

	public static void main(String[] args) {
		SpringApplication.run(RestApplication.class, args);
	}

}

After Running we can test application:
http://localhost:8080/

We get White lable Error.
.....................................................................................
			 API Development Steps


1.Define Resource
 In Spring Resource is called "Controller" so the name of the Resource would be like below
  CustomerController,OrderController

package com.ibm.web.api.hello;

public class HelloController {
}


2.Define api inside Resource

   findAll, findById,save,update,remove

package com.ibm.web.api.hello;


public class HelloController {

    public String sayHello() {
        return "Hello";
    }
}


3.Use Annotations to mark Resource apis..

In order to convert normal class and methods into Rest aware

Annotations:
1.@RestController - @Controller
2.@RequestMapping -  URL mapper
3.Method annotations
  @GetMapping
  @PostMapping
  @PutMapping
  @DeleteMapping

.....

package com.ibm.web;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RestApplication {

	public static void main(String[] args) {
		SpringApplication.run(RestApplication.class, args);
	}

}


package com.ibm.web.api.hello;


import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/hello")
public class HelloController {

    @GetMapping
    public String sayHello() {
        return "Hello";
    }
}

Testing:

Open browser 
http://localhost:8080/hello
.....................................................................................
			   MVC 
.....................................................................................

Write Service class,do DI, invoke method...


package com.ibm.web.api.hello.service;

import org.springframework.stereotype.Service;

@Service
public class HelloService {

    public String sayHello() {
        return "Hello!!";
    }
}
package com.ibm.web.api.hello;


import com.ibm.web.api.hello.service.HelloService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("hello")
public class HelloController {

    @Autowired
    private HelloService helloService;

    @GetMapping
    public String sayHello() {
        return helloService.sayHello();
    }
}
....................................................................................
			 How to read external properties 
....................................................................................

application.properties
spring.application.name=restapp
hello.message=Hello,How are you?


package com.ibm.web.api.hello.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;

@Service
public class HelloService {

    @Autowired
    private Environment environment;

    public String sayHello() {
        return environment.getProperty("hello.message", "How are you");
    }
}
package com.ibm.web.api.hello;


import com.ibm.web.api.hello.service.HelloService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("hello")
public class HelloController {

    @Autowired
    private HelloService helloService;

    @GetMapping
    public String sayHello() {
        return helloService.sayHello();
    }
}
.....................................................................................
		        Returning JSON
....................................................................................

Spring boot has built in json Parser called Jackson,so you dont need to tell the spring that you need Json.

package com.ibm.web.api.todos.entity;

public class Todo {
    private Long userId;
    private Long id;
    private String title;
    private boolean completed;

    public Todo() {
    }

    public Todo(Long userId, Long id, String title, boolean completed) {
        this.userId = userId;
        this.id = id;
        this.title = title;
        this.completed = completed;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public boolean isCompleted() {
        return completed;
    }

    public void setCompleted(boolean completed) {
        this.completed = completed;
    }
}
package com.ibm.web.api.todos.service;

import com.ibm.web.api.todos.entity.Todo;
import jakarta.annotation.PostConstruct;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TodoService {

    private List<Todo> todos;

    @PostConstruct
    public void init() {
        todos = List.of(
                new Todo(1l, 1l, "delectus aut autem", false),
                new Todo(1l, 2l, "quis ut nam facilis et officia qui", false),
                new Todo(1l, 3l, "fugiat veniam minus", false),
                new Todo(1l, 4l, "et porro tempora", true));
    }

    public List<Todo> findAll() {
        return todos;
    }
}

package com.ibm.web.api.todos;

import com.ibm.web.api.todos.entity.Todo;
import com.ibm.web.api.todos.service.TodoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("todos")
public class TodoController {

    @Autowired
    private TodoService todoService;

    @GetMapping
    public List<Todo> findAll() {
        return todoService.findAll();
    }
}
.....................................................................................
		CommandLine Runner for Initaling data
....................................................................................
package com.ibm.web.api.todos.service;

import com.ibm.web.api.todos.entity.Todo;
import jakarta.annotation.PostConstruct;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TodoService {

    private List<Todo> todos;

//    @PostConstruct
//    public void init() {
//        todos = List.of(
//                new Todo(1l, 1l, "delectus aut autem", false),
//                new Todo(1l, 2l, "quis ut nam facilis et officia qui", false),
//                new Todo(1l, 3l, "fugiat veniam minus", false),
//                new Todo(1l, 4l, "et porro tempora", true));
//    }

    @Bean
    public CommandLineRunner init() {
        return args -> {
        todos = List.of(
                new Todo(1l, 1l, "delectus aut autem", false),
                new Todo(1l, 2l, "quis ut nam facilis et officia qui", false),
                new Todo(1l, 3l, "fugiat veniam minus", false),
                new Todo(1l, 4l, "et porro tempora", true));
        };
    }

    public List<Todo> findAll() {
        return todos;
    }
}


































  
   













