  		   Spring Boot REST API Development
.....................................................................................

In General , we can build many types of apps in Spring boot

Common types of apps

1.CommandLine application.
2.Web Applications

Web Applications:

1.Dynamic Web Application:
   Type of web application which talks to datasources, read data , build html pages.
 Users finally access html pages...
 Building web sites.

How to build Dynamic web application in Spring /Spring Boot?

 Spring provides a module/project called "Spring-MVC"


What is Spring?

 Spring java and JEE framework
 Framework is collections of many things called projects and modules.

 Spring Provides many modules, each module offers features for different type of application.

Spring Projects:
................

1.Spring core - Spring Framework
   At core, this project is very core, all projects which was built on the top of Spring core..

2.Spring Boot  - Advanced Spring configuration System

3.Spring Web Frameworks
   ->Spring MVC 
       Spring WebFlux

 Spring MVC | Spring Web Flux
   => Dynamic web apps - Web application with User interface
   => Web services


Web Service:

1.SOAP Web Service -Spring Web Services-4.0.10
2.RestFull Web Services  - Spring MVC
3.GraphQL -  Alternate to REST
....................................................................................
		Spring boot and REST full web service Development
....................................................................................

What is REST?

RE-Reprentational
S-State 
T-Transfer

RE-Reprentational
  Data format - JSON,XML,AVRO,PROTOBuf,pdf,media
S - State 
   Data - Objects and Collections

T- Transfer
  Data is converted into any format which is user interested and transfer over http protocal.

REST is  just specification which was released as part of http specification by co author of http protocal , Roy Fielding.

https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm.
....................................................................................
			   REST Working Principles
....................................................................................

REST Works based on HTTP protocal and its semantic verbs

POST -----> CREATE
GET ------ >READ
PUT | PATCH--------->UPDATE
DELETE-------DELETE

CURD Operations
.....................................................................................

Steps to build REST API

1.Resource
  Domain model, eg Order,Customer,Student,Trainer,Subject

2.Expose api
   Every resource has api , which helps to transfer and get data from and to...

3.Connect to DataSource
   Every api connects to data source in order to get data/read data..

.....................................................................................
			 Spring boot Rest api development

1.create project with following dependency(core)

2.Every spring boot web app runs on Tomcat Container..

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.ibm</groupId>
	<artifactId>restapp</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>restapp</name>
	<description>Building RestFull api</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>

package com.ibm.web;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RestApplication {

	public static void main(String[] args) {
		SpringApplication.run(RestApplication.class, args);
	}

}

After Running we can test application:
http://localhost:8080/

We get White lable Error.
.....................................................................................
			 API Development Steps


1.Define Resource
 In Spring Resource is called "Controller" so the name of the Resource would be like below
  CustomerController,OrderController

package com.ibm.web.api.hello;

public class HelloController {
}


2.Define api inside Resource

   findAll, findById,save,update,remove

package com.ibm.web.api.hello;


public class HelloController {

    public String sayHello() {
        return "Hello";
    }
}


3.Use Annotations to mark Resource apis..

In order to convert normal class and methods into Rest aware

Annotations:
1.@RestController - @Controller
2.@RequestMapping -  URL mapper
3.Method annotations
  @GetMapping
  @PostMapping
  @PutMapping
  @DeleteMapping

.....

package com.ibm.web;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RestApplication {

	public static void main(String[] args) {
		SpringApplication.run(RestApplication.class, args);
	}

}


package com.ibm.web.api.hello;


import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/hello")
public class HelloController {

    @GetMapping
    public String sayHello() {
        return "Hello";
    }
}

Testing:

Open browser 
http://localhost:8080/hello
.....................................................................................
			   MVC 
.....................................................................................

Write Service class,do DI, invoke method...


package com.ibm.web.api.hello.service;

import org.springframework.stereotype.Service;

@Service
public class HelloService {

    public String sayHello() {
        return "Hello!!";
    }
}
package com.ibm.web.api.hello;


import com.ibm.web.api.hello.service.HelloService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("hello")
public class HelloController {

    @Autowired
    private HelloService helloService;

    @GetMapping
    public String sayHello() {
        return helloService.sayHello();
    }
}
....................................................................................
			 How to read external properties 
....................................................................................

application.properties
spring.application.name=restapp
hello.message=Hello,How are you?


package com.ibm.web.api.hello.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;

@Service
public class HelloService {

    @Autowired
    private Environment environment;

    public String sayHello() {
        return environment.getProperty("hello.message", "How are you");
    }
}
package com.ibm.web.api.hello;


import com.ibm.web.api.hello.service.HelloService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("hello")
public class HelloController {

    @Autowired
    private HelloService helloService;

    @GetMapping
    public String sayHello() {
        return helloService.sayHello();
    }
}
.....................................................................................
		        Returning JSON
....................................................................................

Spring boot has built in json Parser called Jackson,so you dont need to tell the spring that you need Json.

package com.ibm.web.api.todos.entity;

public class Todo {
    private Long userId;
    private Long id;
    private String title;
    private boolean completed;

    public Todo() {
    }

    public Todo(Long userId, Long id, String title, boolean completed) {
        this.userId = userId;
        this.id = id;
        this.title = title;
        this.completed = completed;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public boolean isCompleted() {
        return completed;
    }

    public void setCompleted(boolean completed) {
        this.completed = completed;
    }
}
package com.ibm.web.api.todos.service;

import com.ibm.web.api.todos.entity.Todo;
import jakarta.annotation.PostConstruct;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TodoService {

    private List<Todo> todos;

    @PostConstruct
    public void init() {
        todos = List.of(
                new Todo(1l, 1l, "delectus aut autem", false),
                new Todo(1l, 2l, "quis ut nam facilis et officia qui", false),
                new Todo(1l, 3l, "fugiat veniam minus", false),
                new Todo(1l, 4l, "et porro tempora", true));
    }

    public List<Todo> findAll() {
        return todos;
    }
}

package com.ibm.web.api.todos;

import com.ibm.web.api.todos.entity.Todo;
import com.ibm.web.api.todos.service.TodoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("todos")
public class TodoController {

    @Autowired
    private TodoService todoService;

    @GetMapping
    public List<Todo> findAll() {
        return todoService.findAll();
    }
}
.....................................................................................
		CommandLine Runner for Initaling data
....................................................................................
package com.ibm.web.api.todos.service;

import com.ibm.web.api.todos.entity.Todo;
import jakarta.annotation.PostConstruct;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TodoService {

    private List<Todo> todos;

//    @PostConstruct
//    public void init() {
//        todos = List.of(
//                new Todo(1l, 1l, "delectus aut autem", false),
//                new Todo(1l, 2l, "quis ut nam facilis et officia qui", false),
//                new Todo(1l, 3l, "fugiat veniam minus", false),
//                new Todo(1l, 4l, "et porro tempora", true));
//    }

    @Bean
    public CommandLineRunner init() {
        return args -> {
        todos = List.of(
                new Todo(1l, 1l, "delectus aut autem", false),
                new Todo(1l, 2l, "quis ut nam facilis et officia qui", false),
                new Todo(1l, 3l, "fugiat veniam minus", false),
                new Todo(1l, 4l, "et porro tempora", true));
        };
    }

    public List<Todo> findAll() {
        return todos;
    }
}

.....................................................................................
			How to pass data to the rest api
....................................................................................

How to pass input to the api?

There are two ways to pass data to the rest api

1.as part of url - parameters
2.as part of body - payload


Parameters:

1.path parameters
2.Query parameter
3.Matrix Parameter -Optional

Path Parameter:
http://localhost:8080/products/1
http://localhost:8080/products/2

HTTP Request Structure:

Request contains two segments

1.Request headers
  HTTP Request Header, meta information about on going request
2.Request body
  Data what we pass..

Parameters vs Payload:
 Parameters and payload both are used to send data to servr

Parameters are send via "URL" as part of the URL.

http://localhost:8080/products/1
http://localhost:8080/products?sorting=asyc

Payload is used to send data as part of request body which is hidden from the user, we cant see it.
Suppose if i want to send customer information as json...
...................................................................................
			 Path Parameters - dynamic url
...................................................................................

Path Parameter syntax:
  -Query information based on dynamic input called path.

/products/{placeholder}
/products/1

eg:
package com.ibm.web.api.todos.service;

import com.ibm.web.api.todos.entity.Todo;
import jakarta.annotation.PostConstruct;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TodoService {

    private List<Todo> todos;

//    @PostConstruct
//    public void init() {
//        todos = List.of(
//                new Todo(1l, 1l, "delectus aut autem", false),
//                new Todo(1l, 2l, "quis ut nam facilis et officia qui", false),
//                new Todo(1l, 3l, "fugiat veniam minus", false),
//                new Todo(1l, 4l, "et porro tempora", true));
//    }

    @Bean
    public CommandLineRunner init() {
        return args -> {
            todos = List.of(
                    new Todo(1l, 1l, "delectus aut autem", false),
                    new Todo(1l, 2l, "quis ut nam facilis et officia qui", false),
                    new Todo(1l, 3l, "fugiat veniam minus", false),
                    new Todo(1l, 4l, "et porro tempora", true));
        };
    }

    public List<Todo> findAll() {
        return todos;
    }

    public Todo findById(Long item) {
        return new Todo(item, 8l,"Learn Spring", false);
    }
}
package com.ibm.web.api.todos;

import com.ibm.web.api.todos.entity.Todo;
import com.ibm.web.api.todos.service.TodoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("todos")
public class TodoController {

    @Autowired
    private TodoService todoService;

    @GetMapping
    public List<Todo> findAll() {
        return todoService.findAll();
    }

    @GetMapping
    @RequestMapping("{id}")
    public Todo findById(@PathVariable("id") Long id) {
        return  todoService.findById(id);
    }
}

Testing:
http://localhost:8080/todos/10

Response:
{
 userId: 10,
 id: 8,
 title: "Learn Spring",
 completed: false
}
.....................................................................................
				Query parameter/QueryString
....................................................................................

Syntax:
http://localhost:8080/todos/filter?completed=true


package com.ibm.web.api.todos;

import com.ibm.web.api.todos.entity.Todo;
import com.ibm.web.api.todos.service.TodoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("todos")
public class TodoController {

    @Autowired
    private TodoService todoService;
    @GetMapping
    @RequestMapping("filter")
    public List<Todo> filterByStatus(@RequestParam("status") Boolean status) {
        return todoService.filterBy(status);
    }
}
package com.ibm.web.api.todos.service;

import com.ibm.web.api.todos.entity.Todo;
import jakarta.annotation.PostConstruct;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TodoService {

    private List<Todo> todos;

    @Bean
    public CommandLineRunner init() {
        return args -> {
            todos = List.of(
                    new Todo(1l, 1l, "delectus aut autem", false),
                    new Todo(1l, 2l, "quis ut nam facilis et officia qui", false),
                    new Todo(1l, 3l, "fugiat veniam minus", false),
                    new Todo(1l, 4l, "et porro tempora", true));
        };
    }

    public List<Todo> filterBy(Boolean status) {
        return List.of(new Todo(1l, 1l, "delectus aut autem", status));
    }
}

Testing:
http://localhost:8080/todos/filter?status=true

[
{
userId: 1,
id: 1,
title: "delectus aut autem",
completed: true
}
]
....................................................................................
			Sending Payload to Server
....................................................................................

Payload is used  to send for insert, update

How to read Data/payload?

@RequestBody annotation is used to read payload.

package com.ibm.web.api.todos;

import com.ibm.web.api.todos.entity.Todo;
import com.ibm.web.api.todos.service.TodoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("todos")
public class TodoController {

    @Autowired
    private TodoService todoService;

    //save
    @PostMapping
    public Todo save(@RequestBody Todo todo) {
        return todoService.save(todo);
    }
}

package com.ibm.web.api.todos.service;

import com.ibm.web.api.todos.entity.Todo;
import jakarta.annotation.PostConstruct;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TodoService {

  
    public Todo save(Todo todo) {
        //YOu have to write logic to insert
        return todo;
    }
}

Testing 

POST /todos 
    {
        "userId": 1100,
        "id": 134,
        "title": "delectus aut autem",
        "completed": true
    }

Response:

    {
        "userId": 1100,
        "id": 134,
        "title": "delectus aut autem",
        "completed": true
    }

Update:
package com.ibm.web.api.todos;

import com.ibm.web.api.todos.entity.Todo;
import com.ibm.web.api.todos.service.TodoService;
import jakarta.websocket.server.PathParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("todos")
public class TodoController {

    @Autowired
    private TodoService todoService;
    //update

    @PutMapping
    @RequestMapping("update/{id}")
    public Todo update(@RequestBody Todo todo, @PathParam("id") Long id) {
        return todoService.update(todo, id);
    }
}
package com.ibm.web.api.todos.service;

import com.ibm.web.api.todos.entity.Todo;
import jakarta.annotation.PostConstruct;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TodoService {

    private List<Todo> todos;
    public Todo update(Todo todo, Long id) {
        return new Todo(todo.getUserId(), todo.getId(), todo.getTitle(), todo.isCompleted());
    }
}
....................................................................................
			Output-Return Type
....................................................................................

api is just method:
 It can return value..

Return Types:

1.String
2.Object - Collection or Object type 
3.ResponseEntity
4.void
5.Reactive Type - Mono /Flux - Web Flux

Based on Return type, Content Type would be converted

String - Plain/text
Object/Collection - application/json
ResonseEntity - application/json
void - only status code
ReactiveType  - application/json.

Response:
 The reponse can have two things.
1.payload - Data which is returned
2.Meta data-headers
  Headers are just variables which hold some values which describe the nature of reponse.

Response Headers:
1.Content-Type

Content-Type: text/html; charset=utf-8

The MIME type of this content. What type of data server is sending to client.

Basic content type of web is:
  HTML
  Plain/text
Rest content type is :
  
  Representational State Transfer
      |             |
   Data Format     Data
      |
json
xml
pdf
word
etc...

By Default in REST is "json"

2.Content-Length

Content-Length: 348

The length of the response body expressed in 8-bit bytes


3.Date
Date: Tue, 15 Nov 1994 08:12:31 GMT

The date and time that the message was sent (in “HTTP-date” format as defined by RFC 7231)

4.keep-alive
  It is header which talks how long the http connection can exits between server and client default is 60ms

5.Connection
Connection: close

Control options for the current connection and list of hop-by-hop response fields. Deprecated in HTTP/2

.....................................................................................
			Sending Status Code
....................................................................................

HTTP operation Status:

-> informational response - 100 to 199-1X
-> success response -  200-299-2X
-> Redirects  - 300-399 -3X
-> client errors - 400-499 -4X
-> server errrors - 500-599 - 5X

Status Code : 100 to 500
1XX Information Responses

100 Continue
101 Switching Protocols
102 Processing
103 Early Hints

2XX Success

200 OK
201 Created
202 Accepted
203 Non-Authoritative Information
204 No Content
205 Reset Content
206 Partial Content
207 Multi-Status
208 Already Reported
226 IM Used

3XX Redirection
300 Multiple Choices
301 Moved Permanently
302 Found
303 See Other
304 Not Modified
305 Use Proxy
306 Switch Proxy
307 Temporary Redirect
308 Permanent Redirect

4XX Client errors

400 Bad Request
401 Unauthorized
402 Payment Required
403 Forbidden
404 Not Found
405 Method Not Allowed
406 Not Acceptable
407 Proxy Authentication Required
408 Request Timeout
409 Conflict
410 Gone
411 Length Required
412 Precondition Failed
413 Payload Too Large
414 URI Too Long
415 Unsupported Media Type
416 Range Not Satisfiable
417 Expectation Failed
418 I'm a teapot
420 Method Failure
421 Misdirected Request
422 Unprocessable Entity
423 Locked
424 Failed Dependency
426 Upgrade Required
428 Precondition Required
429 Too Many Requests
431 Request Header Fields Too Large
451 Unavailable For Legal Reasons

5XX Server errors
500 Internal Server error
501 Not Implemented
502 Bad Gateway
503 Service Unavailable
504 gateway Timeout
505 Http version not supported
506 Varient Also negotiate
507 Insufficient Storage
508 Loop Detected
510 Not Extended
511 Network Authentication Required

 "By default spring sends 200 status for all success request and response."

What if i want to send some special status code?

According to Rest , Post method must return 201.


How to add StatusCode in the Response?

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public String save(){
        return "Saved";
    }

package com.ibm.web.api.todos;

import com.ibm.web.api.todos.entity.Todo;
import com.ibm.web.api.todos.service.TodoService;
import jakarta.websocket.server.PathParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("todos")
public class TodoController {

    @Autowired
    private TodoService todoService;

    //save
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public Todo save(@RequestBody Todo todo) {
        return todoService.save(todo);
    }
   
}
..................................................................................
			 ResponseEntity
..................................................................................

What if i want to send custom header

ResponseEntity is object , used to encapsulate meta data

package com.ibm.web.api.todos;

import com.ibm.web.api.todos.entity.Todo;
import com.ibm.web.api.todos.service.TodoService;
import jakarta.websocket.server.PathParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("todos")
public class TodoController {

    @Autowired
    private TodoService todoService;

   @PostMapping
    public ResponseEntity<Todo> save(@RequestBody Todo todo) {
        return ResponseEntity
                .status(201)
                .header("name", "ibm")
                .header("location", "Banaglore")
                .contentType(MediaType.APPLICATION_JSON)
                .body(todoService.save(todo));
    }

 
}
.....................................................................................
		     Reactive Programming and Spring
			    (Web flux)
....................................................................................

The reactive-stack web framework, Spring WebFlux, has been added to Spring 5. It is fully non-blocking, supports reactive streams back pressure, and runs on such servers as Netty, Undertow, and Servlet 3.1+ containers.

Reactive Stack:

 Reactive is new programming model, helps to build non blocking / async applications.
 

Traditional web vs Reactive/NonBlocking  web application:
.........................................................

How we use threads,thats where the difference.

In traditional web applications, every request is mapped against a separate dedicated thread - this is called as "Request Per thread Model"

for eg in 1ms , the webserver recieves 100 requests, the web server will have 100 threads.

Request Per thread model drawbacks:

1.Operating system need to maintain so much threads, so that os need more memory, and also operating system need to do context switch a lot, so cpu power is used heavily..

How to manange this?

 We need less threads, thats where new technology was created called "non blocking and async"

Non blocking arch brought  new threading model, where as having limited no of threads, we can achive maximum concurrency...

Threads are reused by multiple request--response handling.
....................................................................................
			Spring and Nonblocking arch
.....................................................................................

Webflux is framework built on the top of "Project reactor", which is spring wrapper..

WebFlux provides a feature to build async and non blocking apps.

Webflux web server is not tomcat, rather we use "netty" server which is non blocking server..


WebFlux provide two Return Type

1.Mono - Return single value
2.Flux - Return sequence of stream of values

.....................................................................................

Spring web Flux Project:

1.Spring Web flux is a parallel version of spring mvc and supports fully non blocking reactive streams

Create Spring mvc app with spring-webflux dependency:
.....................................................

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-webflux</artifactId>
</dependency>



package com.ibm.reactor;

import com.ibm.reactor.entity.Todo;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Mono;

import java.util.List;

@RestController
@RequestMapping("todo")
public class TodoController {


    @GetMapping
    public Mono<List<Todo>> findAll() {
        return Mono.just(List.of(new Todo(1, 3, "Learn Spring Webflux", false)));
    }
}

Note:
 When we create app in micro services, please create with "Reactive Type" - netty server..
.....................................................................................
		      Data base Programming in Spring
....................................................................................

Java language can talk to any database
Java uses jdbc api to talk to database
In order to write jdbc programming in more efficient way,  ORM - object relational mapping- Object oriented way of writing database code.

Generally database deals with SQL Queries

Hibernate and JPA:
..................
JPA is ORM Specification from java , Hibernate is implementation....

Spring boot and JPA With Hibernate:
...................................


				App
				 |
				JPA
			---------------------------------
			|                             |
		  Top link                         Hibernate
		      |                              |
		 ------------------------------------------
				|
			    JDBC - low level api
				|
			      Databases

...................................................................................
			   Spring Data 

Spring Data is collection of many data related projects , in order to connect with various data sources.

Spring Data Jdbc:
  Working with direct jdbc layer...

Spring Data JPA:
  Spring Data JPA, part of the larger Spring Data family, makes it easy to easily implement JPA-based (Java Persistence API) repositories.
  You can connect with any relational databases
   Mysql,Postgresql,oracle,sqlserver etc....


Spring Data LDAP
  Connecting and working with LDAP

Spring data MongoDB
 Spring Data for MongoDB is part of the umbrella Spring Data providing integration with the MongoDB document database


Spring Data Redis
  Spring Data Redis, part of the larger Spring Data portfolio, provides easy configuration and access to Redis from Spring applications

etc...
..................................................................................
			  Spring Data JPA
..................................................................................

Prerequiest:

1.You must know the JPA with Hibernate


Steps:

1.You need database - h2,postgres,mysql,oracle.....
    datbase should be up and running
How to setup database?

1.You can down load database, and you start
2.YOu can use docker to start database
3.You can use in memory database - only for development purpose

2.You must have database drivers to be added in the project dependencies

3.You need to add jpa starter depedency...


Example:

we are going to use h2 database.

Project Dependencies:
<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>


Database Configuration:

application.properties
spring.application.name=jparestapp

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.h2.console.path=/h2


Note:
 When we use h2 database  , we cant have "Webflux", since h2 does not support non blocking implemnetation. but when use other databses , there will not be any issue..

 

Declare entity Class
   
package com.ibm.jparestapp.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Customer {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
    private String firstName;
    private String lastName;

    public Customer() {
    }

    public Customer(Long id, String firstName, String lastName) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}

Declare Repository Interface:
.............................

Spring Data JPA provides wrapper interfaces which provides ready made CURD operations.

We dont need to write any sql queries...


package com.ibm.jparestapp.repository;

import com.ibm.jparestapp.entity.Customer;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface CustomerRepository extends JpaRepository<Customer, Long> {
    //customer db apis
    List<Customer> findByLastName(String lastName);

    Customer findById(long id);
}


Mock data: add some rows during startup...

package com.ibm.jparestapp;

import com.ibm.jparestapp.entity.Customer;
import com.ibm.jparestapp.repository.CustomerRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

@SpringBootApplication
public class JparestappApplication {

    public static void main(String[] args) {
        SpringApplication.run(JparestappApplication.class, args);
    }

    @Bean
    public CommandLineRunner create(CustomerRepository repository) {
        return (args) -> {
            repository.save(new Customer("Subramaian", "Murugan"));
            repository.save(new Customer("Murugan", "Palanisamy"));
            repository.save(new Customer("Geetha", "Subramaian"));
        };
    }
}
.....................................................................................				 REST API and CURD operations

package com.ibm.jparestapp.api;

import com.ibm.jparestapp.entity.Customer;
import com.ibm.jparestapp.repository.CustomerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("customers")
public class CustomerResource {

    @Autowired
    private CustomerRepository repository;

    //find all
    @GetMapping
    public List<Customer> findAll() {
        return repository.findAll();
    }

    //findById
    @GetMapping("{id}")
    public ResponseEntity<Customer> findById(@PathVariable("id") Long id) {
        Optional<Customer> customer = repository.findById(id);

        if (customer.isPresent()) {
            return new ResponseEntity<>(customer.get(), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }

    }

    //remove row
    @DeleteMapping("{id}")
    public ResponseEntity<Customer> remove(@PathVariable("id") Long id) {
        try {
            Optional<Customer> customer = repository.findById(id);
            if (customer.isPresent()) {
                repository.deleteById(id);
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            }
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }

    }

    @PutMapping("{id}")
    public ResponseEntity<Customer> update(@PathVariable("id") Long id, @RequestBody Customer customer) {
        try {
            Optional<Customer> customerFound = repository.findById(id);
            if (customerFound.isPresent()) {
                //update logic
                Customer tmpCustomer = customerFound.get();
                //
                tmpCustomer.setFirstName(customer.getFirstName());
                tmpCustomer.setLastName(customer.getLastName());
                Customer updatedCustomer = repository.save(tmpCustomer);
                return new ResponseEntity<>(updatedCustomer, HttpStatus.OK);
            }
            return new ResponseEntity<>(new Customer(), HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }

    }

    @PostMapping
    //save
    public ResponseEntity<Customer> save(@RequestBody Customer customer) {
        Customer savedCustomer = repository.save(customer);
        return new ResponseEntity<>(savedCustomer, HttpStatus.CREATED);
    }


}











