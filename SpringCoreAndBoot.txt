			    Spring Boot
.....................................................................................

What is Spring Boot?
What is difference Between Spring boot and Spring framework(old spring)-Spring core?
How to build distributed java applications using spring
 -Microservices.
.....................................................................................
			   Spring Framework && Spring Boot
.....................................................................................

What is Spring Framework?

  Spring is Java Framework to build enterprise distributed application.

Types of application?

=>Desktop application

=>Network based application
   Apps runs in the remote machine and accessed that apps via network.
 =>Client Server Arch
	Application has three major layer(tier)
    ->Data Layer -Where we store data
    ->Biz layer - Where we process data
    ->Presentation Layer - Where we present  data

->Mainframe based arch : The first network based application
->Layered Client server arch without mainframeworks

    ->Single/One tier client server - >Both storage and biz processing kept in single 				      machine,where as ui layer is kept separately.

  ->Two/tier client server
        Database/Storage layer is separated, biz processing layer is kept in one 	      machine, and ui also kept in the same machine.

 ->Three tier client server 
	Data layer , Biz processing layer, Ui layer is kept in different machines

->N-tier client server 
      Data Layer
      Biz processing layer
	->MOM Layer - Message oriented middlware -
        ->Rpc layer - Remote Procedure call-app to app interaction.
        ->Integration layer - ESB (Enterprise Server Bus)
    Each layer can be kept in different and different machines , each layer can communicate over network using its own networking protocals

What is Distributed Application?
    Distributed application is other wise called "N-tier client server arch"
 Software components runs in different and different machines and talks over networking using "its own protocal"..

How to build distributed apps?
   You can build distributed applications in any technology like "java",".netnet",php,python,node.js,.....

Distributed application types:
..............................
Now a days distributed apps are built using various patterns.

1.Monolithic Architecture pattern
    Legacy way of building "distributed apps"
2.Microservice Architecture pattern
    Modern way of building "distributed apps"

	  Since Spring is Distribtued java App framework
	   We can build "Mononlolithic" and also we can 
	    build "Microservices" based apps.

			Spring
			  |
	  ------------------------------------------------
          |                                              |
    Monolothic                                     Microserivces



As a java developer, I need to know what are the concepts available to start 
building Monololithic apps in Spring.

1.Spring core Framework & Boot
2.Spring Data 
3.Api Development using webservices - Rest / Soap
4.Integration /MOM using Rabbitmq or Kafka....


As a java developer, I need to know what are the concepts available to start 
building Microservices apps in Spring.


1.Spring core Framework & Boot
2.Spring Data 
3.Api Development using webservices - Rest / Soap
4.Integration /MOM using Rabbitmq or Kafka....
5."Spring Cloud"- framework which provides all infrastructure
  to build Microservices based distributed apps.
....................................................................................
....................................................................................
			 History Of Spring Framework
....................................................................................

Early 2000,Java become very popular for building distributed Applications.

Java Technology Types:

1.JSE 
   -Core java programming language
2.JEE
  -Building distributed apps 
3.JME
  -Device apps like mobile

JCP - Java Community Process
 Who standarize the entire Java Technology.

Java works based on Specification,
   Rules and regualations how things are working.

JSE - How java programming language works
JVM - How Java vm can be implementated.

....................................................................................
                             JEE -Enterprise Specification
.....................................................................................

JEE Platform spec : containers /app containers/tools

1.Web Technology spec
 Java servlet
 JSP
 JSF
 Websocket
 JSTL
 EL
2.Enterprise Application spec
EJB
JPA -ORM
JMS
JTA
DI
Context and DI
Concurrency Util

3.Web Services

SOAP based  -JAX-WS
REST Based  -JAX-RS

4.Management and Security technologies
........................................
Java EE Security spec
Java Auth
Java authorzation
JAVA EE additional spec
JMX -Jmeter

...................................................................................
		Complixty of JEE Spec and implementation
.....................................................................................

JEE enterprise/distributed application:
......................................

Client Layer         Web Layer      Biz layer      Data Layer/Persistency

Browser             Servlet/JSP      EJB               EJB - Entity Beans


EJB :Enterprise Java Bean
  Java Object can support distributed biz operations
eg: incase of shopping cart
  I have a bean(java object) which has three apis addToCart,Checkout,Payment

Api classifications:
1.Session Bean  - to represent biz logic---jdbc--dml
2.Enitity bean  -ORM - Object to Table mapping-First orm solution---Hibernate
3.Message Driven Bean - Message driven systems-RabbitMQ,JMS


Rod johnson  was working in enterprise banking application with jee, he faced lot of 
complexity in designing ejb driven systems, so he decided to move out ejb from JEE application, he wrote book called expert  J2EE ONE ON ONE design and development.

He proposed a model  that model later on came as The project in "Spring Season" - Spring Framework.

Client Layer         Web Layer      Biz layer                Data Layer/Persistency

Browser             Spring MVC     Spring Services          Spring-orm - Spring-								    data

Spring development objective is "POJO". (Plain Old Java Object)

When you build enterprise java apps, no plumbing(bolier plate code),Spring framework takes care that plumbing.


Java is Object Oriented Programming language.

Apps built on java collection of objects.

Object Oriented Principles:
...........................

1.Abstraction
2.Encapsulation
3.Hierarchy
4.Typing
5.Modularity
----------------------
6.Concurrency
7.Persistency

1.Object Management :Hierarchy

Object Relationship

-HAS-A -  Composition
-IS-A - Inheritance.

Enterprise application challanges:

1.Object Management

class Order {
   Product product
}

class Customer{
   Order order
}

class Product {
  Item item
}
class Item {

}

Customer information
 ->Order
     -Product
        -Item

You have to create Object for every class
You have to pass object reference to every Object - HAS-A

new Customer(new Order(new Item()))


IOC : Inversion of Control
 Inversion -Do opposit
 of Control -Management

In enterprise application object creation and linking objects are so complex that should be removed from the developer.

Someone should take care object creation and linking= 
  =>This process is called as IOC.
The IOC suggest the automation program,that program called as IOC Container.

Management - creating object and mainitain its relationship references
		-developer via code

Do Opposit - Dont create object , dont management object life cycle
   IOC
Some body has to create objects and manage its relationship - "Automated Program"
   -IOC Container

ioc container implementation:
 -Spring framework provides at core ioc container - Spring Context

....................................................................................
.....................................................................................
			Spring Application
.....................................................................................
   The application is written in java technology, executed on Spring Container which is runtime for spring applications.spring container runs on jvm


			  Spring Application
				 |
			   Spring Container
				 |
				JVM


What is framework?
   One Stop Solution
 Collection of tools and technologies provided in one place to build end to end applications mostly.
  
  
What spring framework offers?

 Spring offers collection of many projects.


1.Core:

IoC container,
Events, 
Resources, 
i18n,
Validation,
Data Binding,
Type Conversion, 
SpEL,
AOP.

2.Spring MVC
3.Spring cloud
etc....
https://spring.io/projects/
....................................................................................
				Spring Core principle
.....................................................................................

Make Java enterprise distributed application easy way.

=>IOC and Dependency Injection
     -How to create objects and how to link objects.



Spring Provides

1.Application code
   classes which expose biz logic and apis - written by developer

2.Infrastructure code - provided by framework
  creating objects
  initalization dependencies

Spring takes care of infra code, where developer takes care of app code.

Object Creation In spring:
.........................
 In Spring Object creation and linking objects must be separated from the developer
 	-IOC and DI

For implementing IOC and DI, spring offers three technique

Spring is based on Configurtion:

Three types of configuration:

1.XML driven - old way of configuration
2.Java Config Driven - after xml
3.Boot Driven - highly automated configuration system.

We are going to see all types of configuration...


.....................................................................................
				   Tools For Spring Application Development
....................................................................................
1.JDK   17 | 21
   HotSpot or OpenJDk
2.Build Tools
   Maven,Gradle
3.Docker

Spring Versions and features

2004 - Spring Framework 1.0 released
– Champions dependency injection
– Encourages POJOs
– Uses XML files to describe application
  configuration
– Becomes popular quickly as an EJB
  alternative

• Spring 2.0 (2006):
 – XML simplification, async JMS, JPA, AspectJ support

• Spring 2.5 (2007, last release 2.5.6)
  – Requires Java 1.4+ and supports JUnit 4
  – Annotation DI, @MVC controllers, XML namespaces

• Spring 3.x (3.2.17 released July 2013)

   – Environment & Profiles, @Cacheable, @EnableXXX …
   – Requires Java 1.5+ and JUnit 4.7+
   – REST support, JavaConfig, SpEL, more annotations

• Spring 4.x (released Dec 2016)
    – Support for Java 8, @Conditional, Web-sockets

• Spring 5.x (2017) - Spring Boot
  MicroService driven Dev features
   – Reactive programming focus
   - Functional Programming
   - Cloud Functionality
   - Container support

• Spring 6.x (2023)
   -Java 11 and 17 LTS support
   -Only improvments and bug fixing

Spring Boot:
  Spring was available inside Spring Framework 5.x 
  later it became independant project
  Now days only Spring boot is defacto standard for configuring spring applications
  
  Spring boot 3.1 is new Spring Boot Release


				Spring Core Concepts
....................................................................................

Spring Core Concepts:

1.Spring Bean

What is Bean?
   
  Bean is terminallogy coined by SUN Micro System to name java object.


Object vs Bean?

 -Same but Bean has some special characteristics  which was proposed by SUN micro system via "Java Bean Spec"

It is java class, based Java Bean standards
 	-class should be public
 	-properties should be private
 	-set and get methods - Accessors and mutators
	-constructors


Why Bean Spec?
  - in order to standarize the java dev process- Coding Standards.

public class Customer {
  private  int id;
  private String name;
}
    "Spring  follows java bean spec in order to create object and links objects"

class CustomerService {

   private CustomerRespository rep;

   CustomerService(){

   }
   set /get

}
class CustomerRespository{


}

Spring Bean is Java Object follows Bean Specification and also managed by Spring Container.

....................................................................................			  	 Spring Bean Creation(Object)
.....................................................................................


Who creates Spring Beans?

 -Spring Container

 Spring container is java object, which manages object(bean) life cycle like   create,use,destroy.

How spring beans are created?

-> you must have bean definitions outside application biz logic
-> sp container reads that bean definitions, initalizes the beans.

Architecture:

			POJO Classes(Bean)
				 |
    Spring-Application <====>SpringContainer
      config file		 |
		       Fullyconfigured System


Spring Bean Definitions(file) instructs Spring Container how to create objects(order of creations) and how to link (DI) objects

....................................................................................
			Spring Application Configuration Management
.....................................................................................
Spring Application can be configured in many ways

1.XML files  -  Old and Legacy.

2.Java Config + Annotations -Modern way

2.1 Java Config -Manual - Write Configuration and logic

 Here Dev need to write Configuration and biz logic , which makes app dev slower.

Just Focus logic, automate configuration itself - AutoConfig

3.AutoConfig:
    Framework must take care of configuration based on various conditions like
 i want web and jpa , messaging.
                        "Birth of Spring Boot"

....................................................................................
....................................................................................
				Spring Project Setup 
	    

What are the required components to setup Spring Project.

1.IDE,mvn,java

2.Project layout

Spring Project requires

Infra Structure:
 1.Project libraries

 2.Project Configurations

Application Structure

1.Application code
2.assets - imgs,docs
3.App Configuration

mvn or gradle

..............................

.............................................................................................
				    Spring Project Creations
............................................................................................

Whether you build app using Boot or Old Spring Framework Two things you have to take care

1.Project Dependency -  Libraries- core,web,data,cloud,logger....
  You have to manage
  Spring have to manage - Boot via starters

2.Application Configuration
   -Bean defintions -  xml, or javaconfig- manual/auto(spring boot)
   
Spring Project Using Spring Framework method:
.............................................

XML based project:
.................


Steps:

1.create Plain Maven Project and spring dependency.

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>SpringCoreApp</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <dependencies>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>6.1.5</version>
        </dependency>
    </dependencies>

</project>
.....................................................................................
			 Object creations without spring
.....................................................................................

Declare Bean:
package com.ibm.spring.core.beans;

public class Customer {
    private int id;
    private String name;

    public Customer() {
    }

    public Customer(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

Declare Main class and Create Object;
.....................................

package com.ibm.spring.core.beans;

public class ObjectCreationWithoutSpring {
    public static void main(String[] args) {
        //create object
        Customer customer = new Customer();
        //populate data : via setters
        customer.setId(1);
        customer.setName("Subramanian Murugan");

        //read Data : via getters
        System.out.println(customer.getId() + " " + customer.getName());

        //via constructor how to initialize object
        customer = new Customer(2, "Murugan");
        System.out.println(customer.getId() + " " + customer.getName());

    }
}


here 
=> we create objects
=> we popuplate data via setters and constructors.
....................................................................................
			Object creations via Spring Frameworks
...................................................................................
In order to create object by spring, we need a configuration system.

1.XML based configuration- very very old-nobody is using today, but which is foundation for modern spring configuration(auto-spring boot)

2.java config - new way of configuration used today- auto config.


XML based configuration:
1.config xml

place beans.xml in the class path - resources/beans.xml


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- bean definitions here -->
    <bean id="customer" class="com.ibm.spring.core.beans.Customer">
        <!--        Default values set via setters-->
        <!--        <property name="id" value="1"/>-->
        <!--        <property name="name" value="Ram"/>-->

        <!--        Default values set via constructors-->
        <constructor-arg name="id" value="0"/>
        <constructor-arg name="name" value="Foo"/>

    </bean>
</beans>

package com.ibm.spring.core.beans;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class ObjectCreationsWithSpring {
    public static void main(String[] args) {
        //initialize the spring container and gets the bean from spring container
        //Load Spring Container:XMLContainer,JavaConfigContainer,BootContainer
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        Customer customer = context.getBean(Customer.class);
        System.out.println(customer.getId() + customer.getName());

        customer.setName("Subramaniam");
        customer.setId(1);

        System.out.println(customer.getId() + customer.getName());

        customer.setId(3);
        customer.setName("Ram");
        System.out.println(customer.getId() + customer.getName());


    }
}
...................................................................................
			 Depedency Injection


What is dependency Injection?

  Creating Objects
  Linking objects
  Setting Object Property values
  Setting Object references with Object who refers it.

Dependency Injection on reference types and Primitives.

class Customer {
   private int id - primtive - Dependency
   private Order order - Reference type - Dependency
}

Types of DI:

1.Setter
    Linking objects after objects created
2.Constructor
    Linking objects, During object creation.
3.Field Injection
   Linking objects after Creation



When to use Setter vs Constructor?

Note: 
 Constructor properties are initlized during object creations
 Settter properties are initlized after object creations

Spring supports both.You can mix and match.


Constructors:
  ->Enforce mandatory dependencies

Setters:
 1.Allow optional dependenices


Setter and constructor injections can be done with primtive data types and reference types:


Reference Type eg:
..................

Customer has address.

Setter Example:

beans-di.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="custAddress" class="com.ibm.spring.core.di.Address">
        <property name="city" value="City"/>
        <property name="state" value="State"/>
    </bean>
    <bean id="customer" class="com.ibm.spring.core.di.Customer">
        <property name="id" value="0"/>
        <property name="name" value="Name"/>
        <!--        Dependency Injection-->
        <property name="address" ref="custAddress"/>
    </bean>

</beans>


package com.ibm.spring.core.di;

public class Address {
    private String city;
    private String state;

    public Address() {
    }

    public Address(String city, String state) {
        this.city = city;
        this.state = state;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }
}


package com.ibm.spring.core.di;

public class Customer {
    private int id;
    private String name;
    //has-a
    private Address address;

    public Customer() {
    }

    public Customer(int id, String name, Address address) {
        this.id = id;
        this.name = name;
        this.address = address;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Address getAddress() {
        return address;
    }

    public void setAddress(Address address) {
        this.address = address;
    }
}



package com.ibm.spring.core.di;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class SetterInjection {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans-di.xml");
        //Get the customer Bean
        Customer customer = context.getBean(Customer.class);
        //Get all Customer information
        System.out.println("Id" + customer.getId());
        System.out.println("Name " + customer.getName());
        System.out.println("Address " + customer.getAddress().getCity() + " " + customer.getAddress().getState());

        customer.setId(1);
        customer.setName("Subramanian Murugan");
        Address address = customer.getAddress();
        address.setCity("Coimbatore");
        address.setState("Tamil nadu");
        customer.setAddress(address);

        System.out.println("Id" + customer.getId());
        System.out.println("Name " + customer.getName());
        System.out.println("Address " + customer.getAddress().getCity() + " " + customer.getAddress().getState());

    }
}

Constructors Injection:
.......................
beans-di-constructors.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="custAddress" class="com.ibm.spring.core.di.Address">
        <constructor-arg name="city" value="Chennai"/>
        <constructor-arg name="state" value="Tamil Nadu"/>
    </bean>
    <bean id="customer" class="com.ibm.spring.core.di.Customer">
        <constructor-arg name="id" value="1"/>
        <constructor-arg name="name" value="Subramanian Murugan"/>
        <constructor-arg name="address" ref="custAddress"/>
    </bean>

</beans>

package com.ibm.spring.core.di;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class ConstructorInjection {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans-di-constructors.xml");
        //Get the customer Bean
        Customer customer = context.getBean(Customer.class);
        //Get all Customer information
        System.out.println("Id" + customer.getId());
        System.out.println("Name " + customer.getName());
        System.out.println("Address " + customer.getAddress().getCity() + " " + customer.getAddress().getState());


    }
}
.....................................................................................
				Dependency Injection values

1.You can inject primitives values- int,float,string,char,boolean
2.You can inject objects -Customer ,Address
3.You can inject list - Collections,Map,List,Set
.....................................................................................	

Assigment -1:

Create Order and Product classes , populate data accordingly using setter and constructor injection...
.....................................................................................
    	   Interface Based Dependency Injection
..................................................................................

1.Declare interface

package com.ibm.spring.core.di.interfaces;

import java.util.List;

public interface Repository {
    List<String> listAll();
}

2.Implementations

package com.ibm.spring.core.di.interfaces;

import java.util.List;

public class SQLRepositoryImpl implements Repository {
    @Override
    public List<String> listAll() {
        return List.of("CREATE", "UPDATE", "DELETE", "SELECT");
    }
}

package com.ibm.spring.core.di.interfaces;

import java.util.List;

public class NOSQLRepositoryImpl implements Repository {
    @Override
    public List<String> listAll() {
        return List.of("SET", "GET");
    }
}

Injector class:
package com.ibm.spring.core.di.interfaces;

public class CustomerDAO {
    private Repository repository;

    public CustomerDAO() {
    }

    public CustomerDAO(Repository repository) {
        this.repository = repository;
    }

    public Repository getRepository() {
        return repository;
    }

    public void setRepository(Repository repository) {
        this.repository = repository;
    }
}


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--     Create all Interface implementations-->

    <bean id="sql" class="com.ibm.spring.core.di.interfaces.SQLRepositoryImpl"/>
    <bean id="nosql" class="com.ibm.spring.core.di.interfaces.NOSQLRepositoryImpl"/>

    <bean id="customerDAO" class="com.ibm.spring.core.di.interfaces.CustomerDAO">
        <!--        <constructor-arg name="repository" ref="nosql"/>-->
        <constructor-arg name="repository" ref="sql"/>
    </bean>


</beans>
Main:
package com.ibm.spring.core.di.interfaces;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class InterfaceMain {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans-interface-di.xml");
        CustomerDAO customerDAO = context.getBean(CustomerDAO.class);
        System.out.println(customerDAO.getRepository().listAll());

    }
}
....................................................................................
Bean Definitions:

1.How to create bean 
   class,factory-method

2.How to name beans?
   id,name,alias

3.scope of the beans? : visibility of the bean
   singleton,prototype,
   request,session,application,websocket

4.Dependence Injections
   constructor
   setter
   autowire

5.Lazy initialization mode
 controlling bean creations
  eagar-default
  lazy-ondemand
  lazy-init="true"

5.How to simplify bean injections? 
   Autowiring mode 
 no,byName,byType,constructor  

.....................................................................................
.............................................................................................
					Bean Creation
............................................................................................

1.Via class  
   Spring creates using new Operator
  new Order()
  <bean id="order" class="com.ibm.spring.core.Order"/>

2.Via Factory Pattern

-if constructor marked private
   via factory factory api.

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--    <bean id="user" class="com.ibm.spring.core.beans.factory.User">-->
    <!--        <property name="name" value="admin"/>-->
    <!--        <property name="password" value="admin"/>-->
    <!--    </bean>-->

    <!-- Create Instance using factory pattern-->
    <bean id="user" class="com.ibm.spring.core.beans.factory.User" factory-method="getInstance">
        <property name="name" value="admin"/>
        <property name="password" value="admin"/>
    </bean>
</beans>

package com.ibm.spring.core.beans.factory;

public class User {
    private String name;
    private String password;

    private User() {

    }

    public String getName() {
        return name;
    }

    //Factory Method
    public static User getInstance() {
        System.out.println("Factory");
        return new User();
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}
package com.ibm.spring.core.beans.factory;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class FactoryMain {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans-factory.xml");
        User user = context.getBean(User.class);
        System.out.println(user.getName() + user.getPassword());
    }
}
.....................................................................................
			 Bean Scopes
.....................................................................................
Generally, you can create multiple instance from bean definition.
  some times if you want to control that bean creation
you can use bean creation scope.

Spring supports 6 scopes:
 singleton,prototype - core scope
   request,session,application,websocket -web env


1.singleton
 (Default) Scopes a single bean definition to a single object instance for each Spring IoC container.
 if you call getBean no of time, spring returns the only one instance at any point of time.
This is default scope.


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="hello" class="com.ibm.spring.core.beans.scope.Hello"/>

</beans>
package com.ibm.spring.core.beans.scope;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class SingleTon {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans-scope.xml");
        Hello hello1 = context.getBean(Hello.class);
        System.out.println(hello1.hashCode());

        Hello hello2 = context.getBean(Hello.class);
        System.out.println(hello2.hashCode());
    }
}

outPut:
1436664465
1436664465

Here we can see the same hashcode value, meaning that , we have only one instance
....................................................................................
2.prototype:
a new bean instance is created every time a request for that specific bean is made 
that is, the bean is injected into another bean or you request it through a getBean() method call on the container.


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="helloProto" class="com.ibm.spring.core.beans.scope.Hello" scope="prototype"/>

</beans>

package com.ibm.spring.core.beans.scope;


import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Prototype {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans-scope.xml");
        Hello hello1 = context.getBean(Hello.class);
        System.out.println(hello1.hashCode());

        Hello hello2 = context.getBean(Hello.class);
        System.out.println(hello2.hashCode());
    }
}
Output:
1173643169
1282287470
.....................................................................................
			     Automations

How to gradually reduce configurations from the xml, so that spring takes care internally, we can reduce developer job with related to focusing on configuration...

DI automations:

Dependency Injections:
 ->property - setter injections
 ->constructor-arg ref ->constructor injections

->autowire 
Which is not new injection type, but it simplifies property and constructor injections

     no ->Explicit via property or constructor-arg
     byName - Implicit via property
     byType - Implicit via type + property
     constructor - Implicit via constructor

autowire="no | byName | byType | constructor"

Lab
 
Customer
 |
 Address -- via autowire

Without auto wire:

<!--    Without auto wire - manual injection-->
    <bean id="custAddress" class="com.ibm.spring.core.di.Address">
        <property name="city" value="City"/>
        <property name="state" value="State"/>
    </bean>
    <bean id="customer" class="com.ibm.spring.core.di.Customer">
        <property name="id" value="0"/>
        <property name="name" value="Name"/>
        <!--        Dependency Injection-->
        <property name="address" ref="custAddress"/>
    </bean>


With Auto Wire:

    <bean id="custAddress" class="com.ibm.spring.core.di.Address">
        <property name="city" value="City"/>
        <property name="state" value="State"/>
    </bean>
    <bean id="customer" class="com.ibm.spring.core.di.Customer" autowire="byType">
    </bean>

package com.ibm.spring.core.di.autowrires;

import com.ibm.spring.core.di.Customer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class AutoWireInjection {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans-autowire.xml");
        Customer customer = context.getBean(Customer.class);
        System.out.println(customer);

    }
}
.....................................................................................
Bean life cycles:
.................

init
destroy

Points:
1.if you want to initalize the resources,
 Resources:
   Resource is nothing but ,something outside jvm
    ex: FileSystem,Databases,Network sockets,Graphics context....
  Resources must be mananaged properly , if not , it will give you
 memory leaks.

In general , resources are initialized inside Class constructors
eg:Establishing database,socket connections, create file points,open file

According to spring best practices, dont do it inside constructor
 Why
   WHich hindrences the bean intialization, which will drop app startup performance.

then where can i initlaize
 spring provides life cycle hooks

   ->init-method="initmethod"
   ->destroy-method="destroymethod" - Resources clean up

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

  <bean id="database" class="com.ibm.spring.core.beans.lifecycles.DatabaseConnection" destroy-method="destroy" init-method="init"/>

</beans>
package com.ibm.spring.core.beans.lifecycles;

public class DatabaseConnection {

    public void init() {
        System.out.println("Database is being initialized");
    }

    public void destroy() {
        System.out.println("Database connection is closed");
    }

}
package com.ibm.spring.core.beans.lifecycles;

import org.springframework.context.ApplicationContext;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class LifeCycles {
    public static void main(String[] args) {
//        ApplicationContext context = new ClassPathXmlApplicationContext("beans-lifecycle.xml");
//        context.getBean(DatabaseConnection.class);

        ConfigurableApplicationContext context = new ClassPathXmlApplicationContext("beans-lifecycle.xml");
        context.getBean(DatabaseConnection.class);

        context.registerShutdownHook();
    }
}
.....................................................................................
.....................................................................................
			 Container Extensions Points
.....................................................................................

Typically, an application developer does not need to subclass  ApplicationContext implementation classes.

 Instead, the Spring IoC container can be extended by plugging in implementations of special integration interfaces. 


Spring core System:

		  Spring Application
			|	
 	    Configuration Management System
		 (tools-XML,Annotations)
		-------------------------
		|			|
		| Spring IOC Container  |
		------------------------
			|
		       JVM


How to add extensions(plugins) on to the Existing Spring Container?


 		 Spring Application
			|	
 	    Configuration Management System
		 (tools-XML,Annotations)
		-------------------------
		|			|--->Extensions
					|    1.BeanPostProcessor 
		|			|     etc...
		|			|
		| 			|
		| Spring IOC Container  |
		|			|
		|			|	
		|			|
		|		        |
		------------------------
			|
		       JVM

1.BeanPostProcessor 

1.How to instrument beans
2.How to instrument containers


BeanPostProcessor: Extensions
..................
  BeanPostProcessor are classes that tells Spring what should be done after beans are created.


package com.ibm.spring.core.beans.extensions;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;

public class BeanPostProcessorExtension implements BeanPostProcessor {
    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        System.out.println("postProcessAfterInitialization" + beanName);
        return bean;
    }

    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        System.out.println("postProcessBeforeInitialization" + beanName);
        return bean;
    }
}

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="postprocessor" class="com.ibm.spring.core.beans.extensions.BeanPostProcessorExtension"/>
    <bean id="hello" class="com.ibm.spring.core.beans.extensions.Hello"/>


</beans>

package com.ibm.spring.core.beans.extensions;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class BeanExtension {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans-extensions.xml");
        Hello hello = context.getBean(Hello.class);

    }
}
.....................................................................................
         	     More Container Features(extensions)
.....................................................................................

               Spring Application
			|	
 	    Configuration Management System
		 (tools-XML,Annotations)
		-------------------------
		|			|--->Extensions
					|    1.BeanPostProcessor 
		|			|    2.Features2
		|			|    3.Feature3
		| 			|    4.FeatureN
		| Spring IOC Container  |
		|			|
		|			|	
		|			|
		|		        |
		------------------------
			|
		       JVM

Spring provides lot of built in extensions.

PropertyPlaceholderConfigurer :
   It is used to externalize the bean property values
eg:

Bean definition file:
  <bean id="customer" class="com.ibm.spring.core.di.Customer">
        <property name="id" value="0"/>
       
  </bean>

Property value is hardcoded, if wan to isloate into some other place.

with PropertyPlaceHolder = ${propertyKey} =>PropertyValue
  <bean id="customer" class="com.ibm.spring.core.di.Customer">
        <property name="id" value="${customer.id}"/>
     
  </bean>

PropertyPlaceholderConfigurer

classpath: resources/application.properties

customer.id=1
customer.name=Subramanian Murugan

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--    In order to read property file-->
    <!--    PropertyPlaceholder extension-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" value="classpath:application.properties"/>
    </bean>
    <bean id="customer" class="com.ibm.spring.core.beans.extensions.Customer">
        <property name="id" value="${customer.id}"/>
        <property name="name" value="${customer.name}"/>
    </bean>
</beans>

How to read Property Values:

package com.ibm.spring.core.beans.extensions;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class PropertyPlaceHolder {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml-extensions.config.xml");
        Customer customer = context.getBean(Customer.class);
        System.out.println(customer.getId() + " " + customer.getName());
    }
}

.....................................................................................
....................................................................................
	  How to introduce Annotations -Annotation Driven configuration
.....................................................................................
Annotations:
 Meta Information about class,methods,fields.

Why Annotation?
 Annotations help to inject "boiler plate code" -The code which is not neccessary for the dev but necessary for compiler,build tools,document generation tools,runtime.

Spring Introduced Annoations to simplify the lot of code generations.

Types of Spring Annotations

1.Spring Properity annotations
2.JSR 250 Annotations 


How to introduce Annotations inside Spring?
 
 Via ContainerExtension Mechanism

Common Annotations:
1.RequiredAnnotationBeanPostProcessor - @Required
2.AutowiredAnnotationBeanPostProcessor  -@Autowrited
3.CommonAnnotationBeanPostProcessor  -@Common
4.PersistenceAnnotationBeanPostProcessor -@Entity
etc....

Steps to integrate Annotations:

1.Activate The Annoation via ContainerExtension Point Beans

beans.xml

 <bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/>
 -@Required

 -@Autowried
<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

What if any one of the AnnotationBeanPostProcessor has its own dependency, we need to inject That as well, other wise it will throw error.


what if i want to use more annotations, i need to add more AnnotationBeanPostProcessor beans in bean.xml
  This is very complex

Note: modern spring has implicitly added annoation post bean processors , so you dont need to add "Core Annotation BeanPostProcessor in beans.xml".
		.....................................................................................
			Automation - Annoation Scanner
.....................................................................................

Spring added feature called automated scanner, which scans all annoations from the build path/class path, creates all the beans related to annotationBeanPostProcessor


How to tell spring container to scan annotations?

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--    Tell to spring to scan all annotations : you dont need to configure annotation post processors-->
    <context:annotation-config/>

</beans>

Autowire Annotation:
....................

package com.ibm.spring.core.annotations;

import org.springframework.beans.factory.annotation.Autowired;

public class Customer {
    private int id;
    private String name;
    @Autowired
    private Address address;

    public Customer(int id, String name) {
        this.id = id;
        this.name = name;
    }

    @Override
    public String toString() {
        return "Customer{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", address=" + address +
                '}';
    }

    public Customer() {
    }

    public Customer(int id, String name, Address address) {
        this.id = id;
        this.name = name;
        this.address = address;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Address getAddress() {
        return address;
    }

    public void setAddress(Address address) {
        this.address = address;
    }
}
package com.ibm.spring.core.annotations;

public class Address {
    private String city;
    private String state;

    public Address() {
    }

    @Override
    public String toString() {
        return "Address{" +
                "city='" + city + '\'' +
                ", state='" + state + '\'' +
                '}';
    }

    public Address(String city, String state) {
        this.city = city;
        this.state = state;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }
}

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--    Tell to spring to scan all annotations : you dont need to configure annotation post processors-->
    <context:annotation-config/>
    <bean id="address" class="com.ibm.spring.core.annotations.Address">
        <constructor-arg name="city" value="Coimbatore"/>
        <constructor-arg name="state" value="TamilNadu"/>
    </bean>
    <bean id="customer" class="com.ibm.spring.core.annotations.Customer">
        <constructor-arg name="id" value="100"/>
        <constructor-arg name="name" value="Subramanian"/>
    </bean>
</beans>

package com.ibm.spring.core.annotations;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class AutoWiredAnnotation {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans-annotation-scanner.xml");
        Customer customer = context.getBean(Customer.class);
        System.out.println(customer);
    }
}
.....................................................................................
....................................................................................
				Bean Life Cycles and annoatations

in order to add life cycle annotations which is not part of spring core which is part of jsr 250. we need to add separate depedency.

in pom.xml
  <dependency>
            <groupId>javax.annotation</groupId>
            <artifactId>javax.annotation-api</artifactId>
            <version>1.3.2</version>
   </dependency>

package com.ibm.spring.core.annotations;

import org.springframework.beans.factory.annotation.Autowired;

import javax.annotation.PostConstruct;

public class Customer {
    private int id;
    private String name;
    @Autowired
    private Address address;

    public Customer(int id, String name) {
        this.id = id;
        this.name = name;
    }

    @PostConstruct
    public void init() {
        System.out.println("Init.....");
    }

    @Override
    public String toString() {
        return "Customer{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", address=" + address +
                '}';
    }

    public Customer() {
    }

    public Customer(int id, String name, Address address) {
        this.id = id;
        this.name = name;
        this.address = address;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Address getAddress() {
        return address;
    }

    public void setAddress(Address address) {
        this.address = address;
    }
}
....................................................................................
.....................................................................................
			How to reduce code slowly via annotations
.....................................................................................
Types of Annotations
.....................................................................................

1.JSR 250 annoations

@PostConstruct
@PreDestroy

2.Spring Annoations
@Required,@Autowired......etc...

You have beans.xml with annotation configuration, but still we have bean creation definitions how to remove those areas.

How to remove bean definitions from the beans.xml file

   <bean id="customer" class="com.ibm.spring.app.annotations.Customer">
            <property name="id" value="1"/>
            <property name="name" value="Subramanian"/>
   </bean>

Stereotype Annotations:

Stereotype: "Same type of things but it adds extra behaviour based on context"

@Component

What is Component?

The term coined by Microsoft in 1989.
In Object Oriented System Every thing is Object
The Term object is more general term.

Component is also Object(Bean) in spring context
  ->It is resulable
  ->follows all java bean standards

In java technology:
Bean
 In java Bean is called "java Object Only"

EJB
 It is also java object, which is distributed

Enitity
 It is also java object, which is persitable into fs,networks,rdbms

What is use of @Component?
 ->To eleminate bean definition from beans.xml file

<bean id="customerService"  class="com.ae.spring.service.impl.CustomerServiceImpl"/>


Api doc:

 @Target(value=TYPE)
 @Retention(value=RUNTIME)
 @Documented
 @Indexed
public @interface Component

@Component is class level annotation,declared on the top of class.

Indicates that an annotated class is a "component"
Such classes are considered as candidates for auto-detection when using annotation-based configuration and classpath scanning.


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--    Tell to spring to scan all annation : you dont need to annotation post processors-->
    <context:annotation-config/>

    <bean id="orderService" class="com.ibm.spring.beans.OrderService"/>
</beans>

Auto-detection and component scanning:
base package: com.ae.spring

			    com
			     |
			    ae
			     |
                           spring
		    -----------------------------
		   |                            |
                service                        repo
		   |                            |
		 impl                          impl
-------------------------------       -----------------------------
  |               |                   |                          |
CustomerService ProductService     CustomerRepoImpl          ProductRepoImpl
Impl            Impl

@Component      @Component         @Component                @Component

....................................................................................
			Automation - Stereotype Annoation Scanner   ..............................................................................................
Types of SteroTypes:
1.Component  -@Component
2.Service    -@Service
3.Repository -@Repository
4.Controller -@Controller
5.RestController -@RestController
			  
How to scan SteroTypes?

 <context:component-scan base-package="com.valtech.spring.beans.automation"/>

This package and its subpackages , scan and creates beans and make it ready.

@Component is a generic stereotype for any Spring-managed component.

@Repository, @Service, and @Controller are specializations of @Component for more specific use cases.

by annotating them with @Repository, @Service, or @Controller instead, your classes are more properly suited for processing by tools or associating with aspects.

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    <!--    Activate all annotations-->
    <context:annotation-config/>
    <!--Enable StroType annotations and create beans accordingly-->
    <context:component-scan base-package="com.ibm.spring.core"/>
</beans>

package com.ibm.spring.core.annotations.streotypes;

import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class OrderService {

    public List<String> findAll() {
        return List.of("order1", "Order2");
    }
}
package com.ibm.spring.core.annotations.streotypes;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.core.annotation.Order;

public class ComponentAnnotation {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans-annotations-stereo.xml");
        OrderService orderService = context.getBean(OrderService.class);
        System.out.println(orderService.findAll());
    }
}
....................................................................................
			Dependency Injection and SteroTypes
.....................................................................................

package com.ibm.spring.core.annotations.streotypes;

import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class ProductService {

    public List<String> findAllProducts(){
        return  List.of("Product1","Product2","Product3");
    }
}
package com.ibm.spring.core.annotations.streotypes;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class OrderService {

    //Field Injection: No setter and Getter is necessary
    @Autowired
    private ProductService productService;

    public List<String> findAll() {
        return List.of("order1", "Order2");
    }

    public List<String> getProducts() {
        return productService.findAllProducts();
    }
}

package com.ibm.spring.core.annotations.streotypes;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.core.annotation.Order;

public class ComponentAnnotation {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans-annotations-stereo.xml");
        OrderService orderService = context.getBean(OrderService.class);
        System.out.println(orderService.findAll());
        System.out.println(orderService.getProducts());
    }
}
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    <!--    Activate all annotations-->
    <context:annotation-config/>
    <!--Enable StroType annotations and create beans accordingly-->
    <context:component-scan base-package="com.ibm.spring.core"/>
</beans>

.....................................................................................				DOMAIN Driven Design
.....................................................................................
 
@Service:

@Target(value=TYPE)
 @Retention(value=RUNTIME)
 @Documented
 @Component
public @interface Service

Indicates that an annotated class is a "Service", originally defined by Domain-Driven Design (Evans, 2003) as "an operation offered as an interface that stands alone in the model, with no encapsulated state."


@Repository:
@Target(value=TYPE)
 @Retention(value=RUNTIME)
 @Documented
 @Component
public @interface Repository

indicates that an annotated class is a "Repository", originally defined by Domain-Driven Design (Evans, 2003) as "a mechanism for encapsulating storage, retrieval, and search behavior which emulates a collection of objects".

...........................................................................................

@Target(value=TYPE)
 @Retention(value=RUNTIME)
 @Documented
 @Component
public @interface Controller
Indicates that an annotated class is a "Controller" (e.g. a web controller).
.....................................................................................
.....................................................................................
			 End of Xml Configuration
.....................................................................................
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    <!--scanner for common Annotation -->
    <context:annotation-config/>
    <!--    Scanner for StreoType Annotations-->
    <context:component-scan base-package="com.valtech.spring.beans.automation"/>
</beans>
....................................................................................
....................................................................................
..............................................................................................
		What if i want to remove this beans.xml itself
			    Java Config
.....................................................................................

What is Java Config?

JavaConfig <=======> beans.xml
  but it is pure java Program.

Why Java config?
  Java Config was introduced to remove XML,

The XML is outside spring.
Spring need to parse xml file and construct objects accordingly
Which is heavy weight.
Spring introduced new configuration system which is written in java itself.
.....................................................................................









